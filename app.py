from experta import *
from flask import Flask, request, jsonify, render_template
import re

app = Flask(__name__)

PALAVRAS_SAUDACOES = [
    r"\boi\b",
    r"\bol[a√°]\b"
]

PALAVRAS_BOOT = [
    r"\btela\b.*\bazul\b", # \b pra delimitar pra n√£o pegar "estrelado" por exemplo, e o .* serve pra dizer que pode ter qualquer coisa no meio
    r"\bn[a√£]o liga\b",
    r"\bn[a√£]o est[a√°] ligando\b"   
]

PALAVRAS_VIDEO = [
    r"\btela\b.*\bpreta\b",
    r"\btela\b.*\bdistorcida\b",
    r"\bimagem\b.*\bdistorcida\b",
    r"\bresolu[c√ß][a√£]o\b.*\berrada\b",
    r"\bn[a√£]o d[a√°] v[i√≠]deo\b",
    r"\bn[a√£]o aparece\b.*\btela\b",
    r"\bn[a√£]o est[a√°] aparecendo\b.*\btela\b",
    r"\bn[a√£]o mostra\b.*\btela\b",
    r"\btela\b.*\bn[a√£]o aparece\b",
    r"\bnada\b.*\btela\b"
]

PALAVRAS_FONTE = [
    
]

PALAVRAS_FIREWALL = [
    
]

PALAVRAS_SEGURANCA = [
    
]

PALAVRAS_SOFTWARE = [
    
]

PALAVRAS_REDE = [
    
]

PALAVRAS_ARMAZENAMENTO = [
    
]

PALAVRAS_DISPOSITIVOS = [
    
]

PALAVRAS_AUDIO = [
    r"\bsem som\b",
]


class Cliente(Fact):
    pass

class SuporteTecnico(KnowledgeEngine):
    
    def __init__(self):
        super().__init__()
        self.resposta = "‚ùå Problema n√£o identificado."

    @Rule(Cliente(problema=P(lambda x: any(re.search(p, x) for p in PALAVRAS_SAUDACOES))))
    def saudacoes(self):
        self.resposta = "üòÄ Ol√°! Como posso ajudar?"
        self.halt()

    @Rule(Cliente(problema=P(lambda x: any(re.search(p, x) for p in PALAVRAS_BOOT))))
    def problemas_memoria(self):
        self.resposta = "üíæ Problema de mem√≥ria RAM ou energia."
        self.halt()

    @Rule(Cliente(problema=P(lambda x: any(re.search(p, x) for p in PALAVRAS_VIDEO))))
    def problemas_video(self):
        self.resposta = "üñ•Ô∏è Poss√≠vel problema de v√≠deo: verifique o cabo de v√≠deo, a placa gr√°fica ou a tela."
        self.halt()

    @Rule(Cliente(problema=P(lambda x: any(re.search(p, x) for p in PALAVRAS_FONTE))))
    def problemas_fonte(self):
        self.resposta = "üîå Verifique se o cabo de for√ßa est√° conectado corretamente e se h√° energia na tomada. Teste com outro cabo ou fonte, se poss√≠vel."
        self.halt()

    @Rule(Cliente(problema=P(lambda x: any(re.search(p, x) for p in PALAVRAS_FIREWALL))))
    def problemas_firewall(self):
        self.resposta = "üõ°Ô∏è Pode ser o firewall bloqueando o acesso. Verifique as configura√ß√µes ou desative temporariamente para testar a conex√£o."
        self.halt()

    @Rule(Cliente(problema=P(lambda x: any(re.search(p, x) for p in PALAVRAS_SEGURANCA))))
    def problemas_seguranca(self):
        self.resposta = "ü¶† Verifique se o antiv√≠rus est√° bloqueando o programa. Atualize a base de v√≠rus e fa√ßa uma varredura completa no sistema."
        self.halt()

    @Rule(Cliente(problema=P(lambda x: any(re.search(p, x) for p in PALAVRAS_SOFTWARE))))
    def problemas_software(self):
        self.resposta = "üß© Pode ser um problema de software. Tente reinstalar o programa ou verificar por atualiza√ß√µes dispon√≠veis."
        self.halt()

    @Rule(Cliente(problema=P(lambda x: any(re.search(p, x) for p in PALAVRAS_REDE))))
    def problemas_rede(self):
        self.resposta = "üí° Verifique o roteador ou tente reiniciar a conex√£o de rede."
        self.halt()

    @Rule(Cliente(problema=P(lambda x: any(re.search(p, x) for p in PALAVRAS_ARMAZENAMENTO))))
    def problemas_armazenamento(self):
        self.resposta = "üíΩ Verifique o espa√ßo dispon√≠vel no disco. Se estiver cheio, libere espa√ßo excluindo arquivos desnecess√°rios ou transferindo para um HD externo."
        self.halt()

    @Rule(Cliente(problema=P(lambda x: any(re.search(p, x) for p in PALAVRAS_DISPOSITIVOS))))
    def problemas_dispositivos(self):
        self.resposta = "üîå Verifique se o dispositivo est√° corretamente conectado e reconhecido. Tente trocar de porta USB ou reinstalar os drivers."
        self.halt()

    @Rule(Cliente(problema=P(lambda x: any(re.search(p, x) for p in PALAVRAS_AUDIO))))
    def problemas_audio(self):
        self.resposta = "üîä Verifique se o √°udio est√° no mudo, se o cabo est√° conectado corretamente ou se o driver de som est√° instalado e atualizado."
        self.halt()

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/chat", methods=["POST"])
def chat():
    problema = request.json["mensagem"]
    
    engine = SuporteTecnico()
    engine.reset()
    engine.declare(Cliente(problema=problema))
    engine.run()

    return jsonify({"resposta": engine.resposta})

if __name__ == "__main__":
    app.run(debug=True)
